name: build
on:
  push:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-build
  cancel-in-progress: true
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.output_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - id: output_matrix
        run: |
          echo "matrix=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.source == null) | .targets[] | select(.kind[] == "bin") | .name' | jq -R -s -c 'split("\n")[:-1]')" > "$GITHUB_OUTPUT"
  build:
    needs:
      - setup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    strategy:
      matrix:
        service: ${{ fromJSON(needs.setup.outputs.matrix) }}
        target:
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: default
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      DATABASE_URL: postgres://postgres:password@localhost:5432/default
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-directories: |
            target
            ~/.cargo/git
            ~/.cargo/registry
          cache-key: ${{ matrix.service }}-${{ matrix.target }}
          target: ${{ matrix.target }}
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: rui314/setup-mold@v1
      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: sqlx-cli
      - run: |
          for migration in migrations/*; do
            cargo sqlx migrate run --ignore-missing --source "$migration"
          done
          cargo sqlx prepare --workspace
      - uses: mlugg/setup-zig@v2
        with:
          version: latest
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild
      - run: |
          cargo zigbuild --release --target ${{ matrix.target }} --bin ${{ matrix.service }}
          echo $(du -h ./target/${{ matrix.target }}/release/${{ matrix.service }})
